from abc import ABC, abstractmethod
import random

class Person(ABC):
    def __init__ (self, name, power):
        self.name = name
        self.power = power
        
    @abstractmethod
    def talk(self):
        pass
        
        
class Gladiator(Person):
    def __init__(self, name, power):
        super().__init__(name, power)
        self.legion = []
        
    def talk(self):
        print(self.name, "Talk: i am Maksimus, i am collect legion. Power:", self.power)

    def zaverbovat(self):
        if len(self.region) < 10:
            if peasant.ready_to_join and peasant.power > 5:
                self.legion.append(peasant)
                print(peasant.name, "zaverbovan v legion")
            else:
                print(peasant.name, "ne zaverbovan v legion")
        else:
            print("legion is full")
            
    def train():
        for tsel in self.legion:
            tsel.power += 2
            print("train finish")
            
    
    def show_legion(self):
        print("legion: ")
        for tsel in self.legion:
            print (tsel.name, "Power:", tsel.power)
    
class Peasant(Person):
    def __init__(self, name, power):
        super().__init__(name, power)
        self.ready_to_join = random.choice([True, False])

    def talk(self):
        print(self.name, "Talk: i am just peasant. Power:", self.power)
        
        
        
    def create_village(name):
        peasants = []
        
        
    def journey():
        pass
        
        
        
    
        
    
krestjan1 = Peasant("Dasa", 6 )
krestjan2 = Peasant("lena", 7 )
krestjan3 = Peasant("elina", 3 )
krestjan4 = Peasant("sonya", 4 )
krestjan5 = Peasant("sasa", 8 )


krestjan1.talk()

maksimus = Gladiator("Maksimus", 100)
maksimus.show_legion()
maksimus.train()
maksimus.show_legion()

# maksimus.zaverbovat(krestjan1)



